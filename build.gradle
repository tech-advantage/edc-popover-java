group 'fr.techad'
version '3.1.0-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: 'signing'

sourceCompatibility = 1.8

ext {
    // the password needs to be specified via command line with -P
    isReleaseVersion = !version.endsWith("SNAPSHOT")
    signArtefact = project.hasProperty('ossrhUsername')
}

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    implementation 'com.google.inject:guice:4.1.0'
    implementation 'org.apache.commons:commons-lang3:3.6'
    implementation 'ch.qos.logback:logback-classic:1.2.3'
    implementation 'fr.techad:edc-client:3.1.0-SNAPSHOT'
    implementation 'org.glassfish.jersey.containers:jersey-container-servlet:2.25.1'
    implementation 'com.googlecode.json-simple:json-simple:1.1'
    implementation 'net.java.dev.jna:jna-platform:4.2.0'
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            artifact sourcesJar
            artifact javadocJar

            pom.packaging = 'jar'
            pom.withXml {
                asNode().with {
                    appendNode('packaging', 'jar')
                    appendNode('name', 'edc popover')
                    appendNode('description', 'Java Popover to display a summary of the documentation published by edc')
                    appendNode('url', 'https://www.easydoccontents.com')
                    appendNode('organization').with {
                        appendNode('name', 'TECH advantage')
                        appendNode('url', 'https://www.tech-advantage.com')
                    }
                    appendNode('licenses').with {
                        appendNode('license').with {
                            appendNode('name', 'MIT License')
                            appendNode('url', 'http://www.opensource.org/licenses/mit-license.php')
                            appendNode('distribution', 'repo')
                        }
                    }
                    appendNode('scm').with {
                        appendNode('url', 'https://github.com/tech-advantage/edc-popover-java')
                        appendNode('connection', 'scm:git:git://github.com/tech-advantage/edc-popover-java.git')
                    }
                    appendNode('developers').with {
                        appendNode('developer').with {
                            appendNode('name', 'Gregory Cochon')
                            appendNode('email', 'gregory.cochon@tech-advantage.com')
                        }
                    }
                }
            }
            if (signArtefact) {
                // sign the pom
                pom.withXml {
                    def pomFile = file("${project.buildDir}/publications/mavenJava/pom-default.xml")
                    writeTo(pomFile)
                    def pomAscFile = signing.sign(pomFile).signatureFiles[0]
                    artifact(pomAscFile) {
                        classifier = null
                        extension = 'pom.asc'
                    }
                    //  pomFile.delete()
                }

                // sign the artifacts
                project.tasks.signArchives.signatureFiles.each {
                    artifact(it) {
                        def matcher = it.file =~ /-(sources|javadoc|jre9)\.jar\.asc$/
                        if (matcher.find()) {
                            classifier = matcher.group(1)
                        } else {
                            classifier = null
                        }
                        extension = 'jar.asc'
                    }
                }
            }
        }
    }
    /*repositories {
        maven {
            url isReleaseVersion ? "https://oss.sonatype.org/service/local/staging/deploy/maven2" : "https://oss.sonatype.org/content/repositories/snapshots"
            credentials {
                username ossrhUsername
                password ossrhPassword
            }
        }
    }*/
}

signing {
    required { signArtefact && gradle.taskGraph.hasTask("publishing") }
    sign configurations.archives
}

model {
    /*tasks.publishMavenJavaPublicationToMavenLocal {
        dependsOn(project.tasks.signArchives)
    }
    tasks.publishMavenJavaPublicationToMavenRepository {
        dependsOn(project.tasks.signArchives)
    }
    tasks.publish {
        dependsOn(project.tasks.build)
    }
    tasks.install {
        dependsOn(project.tasks.build)
    }*/
}

/*task install(dependsOn: publishToMavenLocal) {
    group = 'Publishing'
    description = 'Installs artifacts to local Maven repository'
}*/

task release() {
    group 'Project'
    description 'Build project as release.'

    dependsOn build
    dependsOn javadoc
}
